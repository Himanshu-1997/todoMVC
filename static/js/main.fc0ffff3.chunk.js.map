{"version":3,"sources":["displayTodolist.js","displayActiveTodolist.js","displayCompletedTodolist.js","App.js","serviceWorker.js","index.js"],"names":["DisplayTodolist","props","useState","isEdit","setIsEdit","index","setIndex","data","map","d","i","className","type","checked","completed","onChange","sendCount","class","style","textDecorationLine","color","onDoubleClick","handleEdit","list","autoFocus","onBlur","e","changeData","target","value","handleOnBlur","onKeyDown","keyCode","handleEvent","defaultValue","onClick","editData","DisplayActiveTodolist","DisplayCompletedTodolist","ENTER","FindChecked","c","length","localStorage","getItem","JSON","parse","App","todolist","setTodolist","display","setDisplay","allMarked","setAllMarked","handleClick","splice","setItem","stringify","handleCheckbox","console","log","handleDisplay","handleEditData","id","handleAllCompleted","autoComplete","placeholder","findNoofCompletedtodo","filter","handleClearCompleted","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fc0ffff3.chunk.js","sourcesContent":["import React,{useState} from 'react';\nconst DisplayTodolist = (props) => {\n    const ENTER=13;\n    const[isEdit,setIsEdit]=useState(false);\n    const [index,setIndex]=useState(-1);\n    const handleEvent = (e,i) =>{\n        if(e.keyCode===ENTER){\n            props.changeData(e.target.value,i);\n            setIsEdit(false);\n            setIndex(-1);\n        }\n    }\n    const handleEdit = (i) => {\n        setIndex(i);\n        setIsEdit(true);\n    }\n    const handleOnBlur = (e,i) => {\n        props.changeData(e.target.value,i);\n        setIsEdit(false);\n        setIndex(-1);\n    }\n    return(\n      <div>\n       {\n           props.data.map((d,i) => {\n               return (\n                   <div className='body'>\n                   <div className='list'>\n                    <div className=\"wrapper\">\n                       <label className='container'>\n                       <input className='checkbox' type='checkbox' checked={d.completed} onChange={() => props.sendCount(i)}/>\n                       <span class=\"checkmark\"></span>\n                        </label>\n                            {isEdit===false || index!==i?\n                        <li style={d.completed?{textDecorationLine:'line-through',color:'#d9d9d9'}:{textDecorationLine:'none'}} className='ele' onDoubleClick={() =>handleEdit(i)} >{d.list}</li>:<input autoFocus type='text' onBlur={(e) =>handleOnBlur(e,i)}  className='editInput' onKeyDown={(e) =>handleEvent(e,i)} defaultValue={props.data[i].list}></input>}\n                         <button onClick={() =>props.editData(i)} className='btn'>X</button>\n                    </div>\n                   </div>\n                   </div>\n               )\n           })\n       }\n      </div>\n    )\n  }\n\n  export default DisplayTodolist;","import React,{useState} from 'react';\n\nconst DisplayActiveTodolist = (props) => {\n    const ENTER=13;\n    const[isEdit,setIsEdit]=useState(false);\n    const [index,setIndex]=useState(-1);\n    const handleEvent = (e,i) =>{\n        if(e.keyCode===ENTER){\n            props.changeData(e.target.value,i);\n            setIsEdit(false);\n            setIndex(-1);\n        }\n      }\n    const handleEdit = (i) => {\n        if(isEdit)\n        setIsEdit(false);\n        else{\n            setIsEdit(true);\n        }\n        setIndex(i);  \n    }\n    const handleOnBlur = (e,i) => {\n        props.changeData(e.target.value,i);\n        setIsEdit(false);\n        setIndex(-1);\n    }\n    return(\n      <div>\n       {\n           props.data.map((d,i) => {\n               if(d.completed===false)\n               return (\n                   <div className='body'>\n                   <div className='list'>\n                       <div className='wrapper'>\n                   <label className='container'>\n                    <input className='checkbox' type='checkbox' checked={d.completed} onChange={() => props.sendCount(i)}/>\n                    <span class=\"checkmark\"></span>\n                   </label>\n                    {isEdit===false || index!==i?\n                   <li style={d.completed?{textDecorationLine:'line-through'}:{textDecorationLine:'none'}} className='ele' onDoubleClick={() =>handleEdit(i)} >{d.list}</li>:<input type='text' className='editInput' autoFocus onBlur={(e) =>handleOnBlur(e,i)} onKeyDown={(e) =>handleEvent(e,i)} defaultValue={props.data[i].list}></input>}\n                   <button onClick={() =>props.editData(i)} className='btn'>X</button>\n                   </div>\n                   </div>\n                   </div>\n               )\n           })\n       }\n      </div>\n    )\n  }\n\n  export default DisplayActiveTodolist;","import React,{useState} from 'react';\n\nconst DisplayCompletedTodolist = (props) => {\n    const ENTER=13;\n    const[isEdit,setIsEdit]=useState(false);\n    const [index,setIndex]=useState(-1);\n    const handleEvent = (e,i) =>{\n        if(e.keyCode===ENTER){\n            props.changeData(e.target.value,i);\n            setIsEdit(false);\n            setIndex(-1);\n        }\n      }\n    const handleEdit = (i) => {\n        if(isEdit)\n        setIsEdit(false);\n        else{\n            setIsEdit(true);\n        }\n        setIndex(i);  \n    }\n    const handleOnBlur = (e,i) => {\n        props.changeData(e.target.value,i);\n        setIsEdit(false);\n        setIndex(-1);\n    }\n    return(\n      <div>\n       {\n           props.data.map((d,i) => {\n               if(d.completed===true)\n               return (\n                   <div className='body'>\n                   <div className='list' >\n                    <div className=\"wrapper\">\n                   <label className='container'>\n                    <input className='checkbox' type='checkbox' checked={d.completed} onChange={() => props.sendCount(i)}/>\n                    <span class=\"checkmark\"></span>\n                   </label>\n                    {isEdit===false || index!==i?\n                   <li  style={d.completed?{textDecorationLine:'line-through',color:'#d9d9d9'}:{textDecorationLine:'none'}} className='ele' onDoubleClick={() =>handleEdit(i)} >{d.list}</li>:<input type='text' className='editInput' autoFocus onBlur={(e) =>handleOnBlur(e,i)} onKeyDown={(e) =>handleEvent(e,i)} defaultValue={props.data[i].list}></input>}\n                   <button onClick={() =>props.editData(i)} className='btn'>X</button>\n                   </div>\n                   </div>\n                   </div>\n               )\n           })\n       }\n      </div>\n    )\n  }\n  export default DisplayCompletedTodolist;","import React,{useState} from 'react';\nimport DisplayTodolist from './displayTodolist';\nimport DisplayActiveTodolist from './displayActiveTodolist';\nimport DisplayCompletedTodolist from './displayCompletedTodolist';\nimport './App.scss';\nconst ENTER=13;\nconst FindChecked = (props) => {\n  let c=0;\n  for(let i=0;i<props.data.length;i++){\n      if(props.data[i].completed===true){\n        c++;\n      }\n    }\n    return (\n      <div className='noItemsLeft'>\n          {props.data.length-c > 1 ?<p>{props.data.length-c} items left</p>:<p>{props.data.length-c} item left</p>}\n        </div>\n    );\n}\n\nlet list = localStorage.getItem('todolist')? JSON.parse(localStorage.getItem('todolist')):[];\n\nfunction App() {\n  const [todolist,setTodolist] = useState(list);\n  const [display,setDisplay] = useState(0);\n  const [allMarked,setAllMarked]=useState(0);\n  const handleEvent = (e) =>{\n    let d=[];\n    if(e.keyCode===ENTER)\n      {\n        if(e.target.value!=='')\n        d = [...todolist,{list:e.target.value,completed:false}];\n        setTodolist(d);\n        e.target.value=''\n      }\n      localStorage.setItem('todolist',JSON.stringify(d));\n  }\n  const handleClick  = (d) =>{\n   todolist.splice(d,1);\n   setTodolist([...todolist]);\n   localStorage.setItem('todolist',JSON.stringify(todolist));\n  }\n  const handleCheckbox = (d) => {\n    console.log(d);\n      if(todolist[d].completed===true){\n        todolist[d].completed=false;\n        setTodolist([...todolist]);\n        localStorage.setItem('todolist',JSON.stringify(todolist));\n      }\n      else{\n        todolist[d].completed=true;\n        setTodolist([...todolist]);\n        localStorage.setItem('todolist',JSON.stringify(todolist));\n      }\n  }\n  const handleDisplay = (d) => {\n    setDisplay(d);\n  }\n  const handleEditData = (d,id) =>{\n    todolist[id].list=d;\n    setTodolist(todolist);\n    localStorage.setItem('todolist',JSON.stringify(todolist));\n  }\n  const handleClearCompleted = () =>{\n    let data;\n    data=todolist.filter( (d,i) => d.completed===false);\n    setTodolist(data);\n    localStorage.setItem('todolist',JSON.stringify(data));\n  }\n  const handleAllCompleted = () => {\n    let data;\n    if(allMarked===0){\n    data=todolist.map( (d,i) =>{\n      if(d.completed===false)\n        d.completed=true;\n      return d;\n    });\n    setAllMarked(1);\n  }\n  else{\n    data=todolist.map( (d,i) =>{\n      if(d.completed===true)\n        d.completed=false;\n      return d;\n    });\n    setAllMarked(0);\n  }\n    setTodolist(data);\n    localStorage.setItem('todolist',JSON.stringify(todolist));\n  }\n\n  const findNoofCompletedtodo = () =>{\n    let d=0;\n    for(let i=0;i<todolist.length;i++){\n      if(todolist[i].completed===true){\n        d+=1;\n      }\n    }\n    return d;    \n  }\n  \n  return (\n    <div className=\"App\">\n      <h1 className='title'>todos</h1>\n      <div className='shadow'>\n          <div className='header'>\n            <button className='drop' onClick={() => handleAllCompleted()}>&#9660;</button>\n            <input id='todo' autoComplete='off' type='text' placeholder='What needs to be done?' onKeyDown={handleEvent}></input>\n          </div>\n          <div className='top'>\n            <div className='content'>\n            {display===0 && <DisplayTodolist data={todolist} editData={(d) => {handleClick(d)}} sendCount={(d) => {handleCheckbox(d)}} changeData={(d,id) =>handleEditData(d,id)}/>}\n            {display===1 && <DisplayActiveTodolist data={todolist} editData={(d) => {handleClick(d)}} sendCount={(d) => {handleCheckbox(d)}} changeData={(d,id) =>handleEditData(d,id)}/>}\n            {display===2 && <DisplayCompletedTodolist data={todolist} editData={(d) => {handleClick(d)}} sendCount={(d) => {handleCheckbox(d)}} changeData={(d,id) =>handleEditData(d,id)}/>}\n            </div>\n            {todolist.length>0 && <div className='footer'>\n            <div className='btns'>\n              <div className='ileft'>\n                <FindChecked data={todolist}/>\n                <div className='three-btn'>\n                  {display===0?<button  className='all-btn active' onClick={() =>handleDisplay(0)}>All</button>:<button  className='all-btn' onClick={() =>handleDisplay(0)}>All</button>}\n                  {display===1?<button  className='active-btn active' onClick={() =>handleDisplay(1)}>Active</button>:<button  className='active-btn' onClick={() =>handleDisplay(1)}>Active</button>}\n                  {display===2?<button  className='comp-btn active' onClick={() =>handleDisplay(2)}>Completed</button>:<button  className='comp-btn' onClick={() =>handleDisplay(2)}>Completed</button>}\n                </div>\n              </div>\n              {findNoofCompletedtodo()>0 && <button className='clr-comp' onClick={() => handleClearCompleted()}>Clear completed</button> }  \n            </div>\n            </div>} \n          </div> \n      </div>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}